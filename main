import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    print('Hello! Let\'s explore some US bikeshare data!')

  # get user input for city (chicago, new york city, washington).
    city_selection = input('To view the available bikeshare data, type:\n (a) for Chicago\n (b) for New York City\n (c) for Washington\n  ').lower()
    while city_selection not in ('a','b','c'):
        print('That\'s invalid input.') # tell the user that the input is not right.
        city_selection = input('To view the available bikeshare data, kindly type:\n The letter (a) for Chicago\n The letter (b) for New York City\n The letter (c) for Washington:\n ').lower()
        print(city_selection)

    selections = {"a":"chicago", "b":"new york city", "c":"washington"}
    if city_selection in selections.keys():
        # define the city variable
        city = selections[city_selection]

     # get user input for month (all, january, february, ... , june)
    time_frame = input('\n\nWould you like to filter {}\'s data by month, day, both, or not at all? type month or day or both or none: \n'.format(city.title())).lower()

    # validate that user input is as expected.
    while time_frame not in {'none', 'both','month','day'}:
        print('That\'s not a valid choice')
        time_frame = input('\n\nWould you like to filter {}\'s data by month, day, both, or not at all? type month or day or both or none: \n\n'.format(city.title())).lower()

    # Building lists for the possible values for months and days.
    months = ['january', 'february', 'march', 'april', 'may', 'june']
    days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']

    # Dealing with the none case
    if time_frame == 'none':
        print('\nFiltering for {} for the 6 months period\n\n'.format(city.title()))
        month_selection = 'all'
        day_selection = 'all'

    elif time_frame == 'both':
    # month input
        month_selection = input('\n pls enter month of six months january, february,march,april,may,june\n').lower()
    # validate the user input
        while month_selection not in months:
            print ('\n invalid month selection ')
            month_selection = input('\n pls enter month of six months \n january, february,march, april, may, june\n').lower()
     # day input
        day_selection = input('\n pls enter day of 7 monday,tuesday,wednesday,thursday,friday,saturday,sunday\n').lower()
    # validate the user input
        while day_selection not in days:
            print ('\n invalid day selection ')
            day_selection = input('\n pls enter day of 7 monday ,tuesday ,wednesday ,thursday,friday,saturday,sunday\n').lower()
    elif time_frame =='day':
        # day input
        day_selection = input('\n pls enter day of 7 monday,tuesday,wednesday,thursday,friday,saturday,sunday\n').lower()
        month_selection='all'
    # validate the user input
        while day_selection not in days:
            print ('\n invalid day selection ')
            day_selection = input('\n pls enter day of 7 monday ,tuesday ,wednesday ,thursday,friday,saturday,sunday\n').lower()
            month_selection='all'

    elif time_frame == 'month':
        # month input
            month_selection = input('\n pls enter month of six months january, february,march,april,may,june\n').lower()
            day_selection ='all'

        # validate the user input
            while month_selection not in months:
                print ('\n invalid month selection ')
                month_selection = input('\n pls enter month of six months \n january, february,march, april, may, june\n').lower()
                day_selection ='all'

    # assign the day to the validated day_selection value
    return city, month_selection, day_selection


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """

    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])

    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.day_name()
    df['start_station']= str(df['Start Station'])
    df['end_station']= str(df['End Station'])
    df['trip_duration']= df['Trip Duration']
    df['user_type']= str(df['User Type'])
    if city in ('chicago','new york city'):
            df['gender']= str(df['Gender'])
            df['birth_yaer']=df['Birth Year']

    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
       months = ['january', 'february', 'march', 'april', 'may', 'june']
       month = months.index(month) + 1
      # filter by month to create the new dataframe
       df = df[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]
    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')

    #start_time = time.time()

    # display the most common month
    month_=df['month'].mode()[0]
    print ('\n \n most common month  {}\n '.format(month_))


    # display the most common day of week
    day_common=df['day_of_week'].mode()[0]
    print ('\n \n most common day  {}\n '.format(day_common))


    # display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    popular_hour = df['hour'].mode()[0]
    print ('\n \n most common  hour  {}\n '.format(popular_hour))


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')

    # display most commonly used start station
    common_start_st=df['start_station'].mode()[0]
    print ('\n \n most common start station {}\n\n'.format(common_start_st))

    # display most commonly used end station
    common_end_st=df['end_station'].mode()[0]
    print ('\n \n most common end station {}\n\n'.format(common_end_st))

    # display most frequent combination of start station and end station trip
    #most_fre={'end_station':df['end_station'],
    #'start_station' : df['start_station'] }
    #dx=pd.DataFrame(most_fre)
    df['Station Combination'] = df['start_station'] + 'and' + df['end_station']

    print ('\n \n most common  combination of start station & end stattion is {}\n\n'.format(df['Station Combination'].mode()))
    print('-'*40)

def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')

    # display total travel time
    total_trip_duration=df['trip_duration'].sum()
    print ('\n total trip duration is {} seconds\n\n'.format(total_trip_duration))

    # display mean travel time
    average_trip_duration=df['trip_duration'].mean()
    print ('\n Trips Average is {} seconds\n\n'.format(average_trip_duration))

    #print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    # Display counts of user types
    user_type_count = df['user_type'].value_counts().to_frame()
    print ('\n the total user types is {}'.format(user_type_count))
    print('-'*40)

def gender_birth_year(df):
    # Display counts of gender
    gender_count = df['gender'].value_counts().to_frame()
    print ('\n\nthhe total gender is {}'.format(gender_count))



    # Display earliest, most recent, and most common year of birth
    common_year=df['birth_yaer'].mode()[0]
    print ('\n\nthhe common birth year is {}'.format(common_year))

    earliest_year=df['birth_yaer'].min()
    print ('\n\nthhe earliest birth year is {}'.format(earliest_year))

    recent_year=df['birth_yaer'].max()
    print ('\n\nthhe most recent birth year is {}'.format(recent_year))
    print('-'*40)

def display_raw_data(city):
    display_raw=input('\n \n do you want to display raw data ?? type yes or no\n \n')
    while display_raw == 'yes':
        try:
            #looping over the chunks in the pd.read_csv() function with a for loop (chunksize=5):
            for chunk in pd.read_csv(CITY_DATA[city], chunksize=5):
                print(chunk)
                # repeating the question
                display_raw=input('\n \n do you want to display raw data ?? type yes or no\n \n')
                if display_raw != 'yes':
                    print('\n \nThank You\n \n')
                    break
            break
        except KeyboardInterrupt:
            print('Thank you.')


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        if city in ('new york city','chicago'):
            gender_birth_year(df)
        display_raw_data(city)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break





if __name__ == "__main__":
	main()
